using AoCHelper;

namespace AdventOfCode
{
    public class Day_03 : BaseDay
    {
        private readonly List<string> _diagnosticReport;

        public Day_03()
        {
            _diagnosticReport = File.ReadAllLines(InputFilePath).ToList();
        }

        public override ValueTask<string> Solve_1() => new(CalculatePowerConsumption(_diagnosticReport).ToString());

        public override ValueTask<string> Solve_2() => new("Answer for Solve_2 will be here");

        private long CalculatePowerConsumption(List<string> diagnosticReport)
        {
            var (gammaRate, epsilonRate) = CalculateGammaAndEpsilonRate(diagnosticReport);
            return gammaRate * epsilonRate;
        }

        private (long gammaRate, long epsilonRate) CalculateGammaAndEpsilonRate(List<string> diagnosticReport)
        {
            var convertedDiagnosticReport = ConvertDiagnosticReport(diagnosticReport);

            var gammaRateString = string.Empty;
            var epsilonRateString = string.Empty;

            foreach (var line in convertedDiagnosticReport)
            {
                var isBit0MostCommon = line.Count(bit => bit == '0') > (line.Length / 2);
                gammaRateString += isBit0MostCommon ? "0" : "1";
                epsilonRateString += isBit0MostCommon ? "1" : "0";
            }

            return (Convert.ToInt64(gammaRateString, 2), Convert.ToInt64(epsilonRateString, 2));
        }

        /// <summary>
        /// Convert the report so that a new list of strings is generated by using the values of each diagnosticreport item on the same position
        /// (e.g. all values on index 0 create a new string, all values on index 1 create a new string, ...)
        /// </summary>
        /// <param name="diagnosticReport"></param>
        /// <returns></returns>
        private IEnumerable<string> ConvertDiagnosticReport(List<string> diagnosticReport)
        {
            for(var i = 0; i < diagnosticReport[0].Length; i++)
            {
                yield return string.Join("", diagnosticReport.Select(line => line[i]));
            }
        }
    }
}
